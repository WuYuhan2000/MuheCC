{
"commits": [
{
	"repository": "https://github.com/kiegroup/drools",
	"sha1": "869a002cae63a4e8ab52ec7f2d15d5a2cfbe0c02",
	"url": "https://github.com/kiegroup/drools/commit/869a002cae63a4e8ab52ec7f2d15d5a2cfbe0c02",
	"refactorings": [{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type orTransformations : Map to orTransformations : Map<GroupElement.Type,Transformation> in class org.drools.core.rule.LogicTransformer",
	"leftSideLocations": [{
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 43,
		"endLine": 43,
		"startColumn": 37,
		"endColumn": 70,
		"codeElementType": "FIELD_DECLARATION",
		"description": "original attribute declaration",
		"codeElement": "orTransformations : Map"
}],
	"rightSideLocations": [{
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 42,
		"endLine": 42,
		"startColumn": 58,
		"endColumn": 126,
		"codeElementType": "FIELD_DECLARATION",
		"description": "changed-type attribute declaration",
		"codeElement": "orTransformations : Map<GroupElement.Type,Transformation>"
}]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type contextStack : Stack to contextStack : Stack<RuleConditionElement> in method private processElement(resolver DeclarationScopeResolver, contextStack Stack<RuleConditionElement>, element RuleConditionElement) : void from class org.drools.core.rule.LogicTransformer",
	"leftSideLocations": [{
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 171,
		"endLine": 171,
		"startColumn": 33,
		"endColumn": 57,
		"codeElementType": "SINGLE_VARIABLE_DECLARATION",
		"description": "original variable declaration",
		"codeElement": "contextStack : Stack"
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 287,
		"endLine": 289,
		"startColumn": 17,
		"endColumn": 47,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement referencing the original variable",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 218,
		"endLine": 220,
		"startColumn": 17,
		"endColumn": 39,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement referencing the original variable",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 285,
		"endLine": 285,
		"startColumn": 13,
		"endColumn": 42,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement referencing the original variable",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 291,
		"endLine": 291,
		"startColumn": 13,
		"endColumn": 32,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement referencing the original variable",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 176,
		"endLine": 178,
		"startColumn": 17,
		"endColumn": 68,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement referencing the original variable",
		"codeElement": null
}],
	"rightSideLocations": [{
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 164,
		"endLine": 164,
		"startColumn": 33,
		"endColumn": 79,
		"codeElementType": "SINGLE_VARIABLE_DECLARATION",
		"description": "changed-type variable declaration",
		"codeElement": "contextStack : Stack<RuleConditionElement>"
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 251,
		"endLine": 253,
		"startColumn": 17,
		"endColumn": 47,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement referencing the variable with changed type",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 185,
		"endLine": 185,
		"startColumn": 17,
		"endColumn": 63,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement referencing the variable with changed type",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 249,
		"endLine": 249,
		"startColumn": 13,
		"endColumn": 42,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement referencing the variable with changed type",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 255,
		"endLine": 255,
		"startColumn": 13,
		"endColumn": 32,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement referencing the variable with changed type",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 169,
		"endLine": 171,
		"startColumn": 17,
		"endColumn": 56,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement referencing the variable with changed type",
		"codeElement": null
}]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type contextStack : Stack to contextStack : Stack<RuleConditionElement> in method protected fixClonedDeclarations(and GroupElement, globals Map<String,Class<?>>) : void from class org.drools.core.rule.LogicTransformer",
	"leftSideLocations": [{
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 153,
		"endLine": 153,
		"startColumn": 15,
		"endColumn": 41,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "original variable declaration",
		"codeElement": "contextStack : Stack"
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 154,
		"endLine": 155,
		"startColumn": 9,
		"endColumn": 90,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "statement referencing the original variable",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 157,
		"endLine": 157,
		"startColumn": 9,
		"endColumn": 34,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement referencing the original variable",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 158,
		"endLine": 160,
		"startColumn": 9,
		"endColumn": 31,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement referencing the original variable",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 161,
		"endLine": 161,
		"startColumn": 9,
		"endColumn": 28,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement referencing the original variable",
		"codeElement": null
}],
	"rightSideLocations": [{
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 149,
		"endLine": 149,
		"startColumn": 37,
		"endColumn": 85,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "changed-type variable declaration",
		"codeElement": "contextStack : Stack<RuleConditionElement>"
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 150,
		"endLine": 151,
		"startColumn": 9,
		"endColumn": 90,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "statement referencing the variable with changed type",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 153,
		"endLine": 153,
		"startColumn": 9,
		"endColumn": 34,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement referencing the variable with changed type",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 154,
		"endLine": 156,
		"startColumn": 9,
		"endColumn": 31,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement referencing the variable with changed type",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 157,
		"endLine": 157,
		"startColumn": 9,
		"endColumn": 28,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement referencing the variable with changed type",
		"codeElement": null
}]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type orsList : List to orsList : List<GroupElement> in method public transform(parent GroupElement) : void from class org.drools.core.rule.LogicTransformer.AndOrTransformation",
	"leftSideLocations": [{
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 422,
		"endLine": 422,
		"startColumn": 24,
		"endColumn": 49,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "original variable declaration",
		"codeElement": "orsList : List"
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 432,
		"endLine": 432,
		"startColumn": 21,
		"endColumn": 40,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement referencing the original variable",
		"codeElement": null
}],
	"rightSideLocations": [{
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 437,
		"endLine": 437,
		"startColumn": 38,
		"endColumn": 77,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "changed-type variable declaration",
		"codeElement": "orsList : List<GroupElement>"
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 447,
		"endLine": 447,
		"startColumn": 21,
		"endColumn": 54,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement referencing the variable with changed type",
		"codeElement": null
}]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type others : Object[] to others : RuleConditionElement[] in method public transform(parent GroupElement) : void from class org.drools.core.rule.LogicTransformer.AndOrTransformation",
	"leftSideLocations": [{
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 424,
		"endLine": 424,
		"startColumn": 28,
		"endColumn": 76,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "original variable declaration",
		"codeElement": "others : Object[]"
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 434,
		"endLine": 434,
		"startColumn": 21,
		"endColumn": 43,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement referencing the original variable",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 470,
		"endLine": 471,
		"startColumn": 25,
		"endColumn": 116,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement referencing the original variable",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 466,
		"endLine": 472,
		"startColumn": 21,
		"endColumn": 22,
		"codeElementType": "IF_STATEMENT",
		"description": "statement referencing the original variable",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 465,
		"endLine": 473,
		"startColumn": 17,
		"endColumn": 18,
		"codeElementType": "FOR_STATEMENT",
		"description": "statement referencing the original variable",
		"codeElement": null
}],
	"rightSideLocations": [{
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 439,
		"endLine": 439,
		"startColumn": 42,
		"endColumn": 104,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "changed-type variable declaration",
		"codeElement": "others : RuleConditionElement[]"
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 449,
		"endLine": 449,
		"startColumn": 21,
		"endColumn": 43,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement referencing the variable with changed type",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 485,
		"endLine": 485,
		"startColumn": 25,
		"endColumn": 71,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement referencing the variable with changed type",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 481,
		"endLine": 486,
		"startColumn": 21,
		"endColumn": 22,
		"codeElementType": "IF_STATEMENT",
		"description": "statement referencing the variable with changed type",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 480,
		"endLine": 487,
		"startColumn": 17,
		"endColumn": 18,
		"codeElementType": "FOR_STATEMENT",
		"description": "statement referencing the variable with changed type",
		"codeElement": null
}]
},
{
	"type": "Encapsulate Attribute",
	"description": "Encapsulate Attribute protected requiredDeclarations : Declaration[] from class org.drools.core.rule.Accumulate",
	"leftSideLocations": [{
		"filePath": "drools-core/src/main/java/org/drools/core/rule/Accumulate.java",
		"startLine": 44,
		"endLine": 44,
		"startColumn": 36,
		"endColumn": 56,
		"codeElementType": "FIELD_DECLARATION",
		"description": "original attribute declaration",
		"codeElement": "protected requiredDeclarations : Declaration[]"
}],
	"rightSideLocations": [{
		"filePath": "drools-core/src/main/java/org/drools/core/rule/Accumulate.java",
		"startLine": 44,
		"endLine": 44,
		"startColumn": 36,
		"endColumn": 56,
		"codeElementType": "FIELD_DECLARATION",
		"description": "encapsulated attribute declaration",
		"codeElement": "protected requiredDeclarations : Declaration[]"
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/Accumulate.java",
		"startLine": 181,
		"endLine": 183,
		"startColumn": 5,
		"endColumn": 6,
		"codeElementType": "METHOD_DECLARATION",
		"description": "added getter method",
		"codeElement": "public getRequiredDeclarations() : Declaration[]"
}]
},
{
	"type": "Extract Method",
	"description": "Extract Method private replaceDeclarations(resolver DeclarationScopeResolver, accumulate Accumulate) : void extracted from private processElement(resolver DeclarationScopeResolver, contextStack Stack, element RuleConditionElement) : void in class org.drools.core.rule.LogicTransformer",
	"leftSideLocations": [{
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 164,
		"endLine": 293,
		"startColumn": 5,
		"endColumn": 6,
		"codeElementType": "METHOD_DECLARATION",
		"description": "source method declaration before extraction",
		"codeElement": "private processElement(resolver DeclarationScopeResolver, contextStack Stack, element RuleConditionElement) : void"
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 234,
		"endLine": 234,
		"startColumn": 21,
		"endColumn": 54,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 235,
		"endLine": 235,
		"startColumn": 21,
		"endColumn": 83,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 237,
		"endLine": 239,
		"startColumn": 25,
		"endColumn": 42,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 236,
		"endLine": 242,
		"startColumn": 21,
		"endColumn": 22,
		"codeElementType": "IF_STATEMENT",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 232,
		"endLine": 243,
		"startColumn": 24,
		"endColumn": 18,
		"codeElementType": "IF_STATEMENT",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 236,
		"endLine": 242,
		"startColumn": 60,
		"endColumn": 22,
		"codeElementType": "BLOCK",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 232,
		"endLine": 243,
		"startColumn": 46,
		"endColumn": 18,
		"codeElementType": "BLOCK",
		"description": "extracted code from source method declaration",
		"codeElement": null
}],
	"rightSideLocations": [{
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 290,
		"endLine": 310,
		"startColumn": 5,
		"endColumn": 6,
		"codeElementType": "METHOD_DECLARATION",
		"description": "extracted method declaration",
		"codeElement": "private replaceDeclarations(resolver DeclarationScopeResolver, accumulate Accumulate) : void"
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 301,
		"endLine": 301,
		"startColumn": 17,
		"endColumn": 50,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 302,
		"endLine": 302,
		"startColumn": 17,
		"endColumn": 81,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 304,
		"endLine": 305,
		"startColumn": 21,
		"endColumn": 59,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 303,
		"endLine": 307,
		"startColumn": 17,
		"endColumn": 18,
		"codeElementType": "IF_STATEMENT",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 299,
		"endLine": 308,
		"startColumn": 20,
		"endColumn": 14,
		"codeElementType": "IF_STATEMENT",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 303,
		"endLine": 307,
		"startColumn": 58,
		"endColumn": 18,
		"codeElementType": "BLOCK",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 299,
		"endLine": 308,
		"startColumn": 44,
		"endColumn": 14,
		"codeElementType": "BLOCK",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 160,
		"endLine": 257,
		"startColumn": 5,
		"endColumn": 6,
		"codeElementType": "METHOD_DECLARATION",
		"description": "source method declaration after extraction",
		"codeElement": "private processElement(resolver DeclarationScopeResolver, contextStack Stack<RuleConditionElement>, element RuleConditionElement) : void"
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 188,
		"endLine": 188,
		"startColumn": 13,
		"endColumn": 56,
		"codeElementType": "METHOD_INVOCATION",
		"description": "extracted method invocation",
		"codeElement": "replaceDeclarations(resolver,accumulate)"
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 291,
		"endLine": 291,
		"startColumn": 9,
		"endColumn": 67,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "added statement in extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 306,
		"endLine": 306,
		"startColumn": 21,
		"endColumn": 70,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "added statement in extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 297,
		"endLine": 298,
		"startColumn": 17,
		"endColumn": 59,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "added statement in extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 293,
		"endLine": 294,
		"startColumn": 13,
		"endColumn": 85,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "added statement in extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 296,
		"endLine": 299,
		"startColumn": 58,
		"endColumn": 14,
		"codeElementType": "BLOCK",
		"description": "added statement in extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 296,
		"endLine": 308,
		"startColumn": 13,
		"endColumn": 14,
		"codeElementType": "IF_STATEMENT",
		"description": "added statement in extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 292,
		"endLine": 309,
		"startColumn": 9,
		"endColumn": 10,
		"codeElementType": "ENHANCED_FOR_STATEMENT",
		"description": "added statement in extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 292,
		"endLine": 309,
		"startColumn": 42,
		"endColumn": 10,
		"codeElementType": "BLOCK",
		"description": "added statement in extracted method declaration",
		"codeElement": null
}]
},
{
	"type": "Extract Method",
	"description": "Extract Method private replaceDeclarations(resolver DeclarationScopeResolver, pattern Pattern, constraint Constraint) : void extracted from private processElement(resolver DeclarationScopeResolver, contextStack Stack, element RuleConditionElement) : void in class org.drools.core.rule.LogicTransformer",
	"leftSideLocations": [{
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 164,
		"endLine": 293,
		"startColumn": 5,
		"endColumn": 6,
		"codeElementType": "METHOD_DECLARATION",
		"description": "source method declaration before extraction",
		"codeElement": "private processElement(resolver DeclarationScopeResolver, contextStack Stack, element RuleConditionElement) : void"
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 185,
		"endLine": 185,
		"startColumn": 17,
		"endColumn": 75,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 192,
		"endLine": 192,
		"startColumn": 29,
		"endColumn": 168,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 193,
		"endLine": 193,
		"startColumn": 29,
		"endColumn": 69,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 195,
		"endLine": 195,
		"startColumn": 29,
		"endColumn": 78,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 187,
		"endLine": 188,
		"startColumn": 21,
		"endColumn": 93,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 200,
		"endLine": 201,
		"startColumn": 25,
		"endColumn": 65,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 209,
		"endLine": 209,
		"startColumn": 29,
		"endColumn": 78,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 194,
		"endLine": 196,
		"startColumn": 32,
		"endColumn": 26,
		"codeElementType": "IF_STATEMENT",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 191,
		"endLine": 196,
		"startColumn": 25,
		"endColumn": 26,
		"codeElementType": "IF_STATEMENT",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 190,
		"endLine": 197,
		"startColumn": 21,
		"endColumn": 22,
		"codeElementType": "IF_STATEMENT",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 206,
		"endLine": 210,
		"startColumn": 25,
		"endColumn": 26,
		"codeElementType": "IF_STATEMENT",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 202,
		"endLine": 211,
		"startColumn": 28,
		"endColumn": 22,
		"codeElementType": "IF_STATEMENT",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 199,
		"endLine": 211,
		"startColumn": 21,
		"endColumn": 22,
		"codeElementType": "IF_STATEMENT",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 186,
		"endLine": 212,
		"startColumn": 17,
		"endColumn": 18,
		"codeElementType": "FOR_STATEMENT",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 194,
		"endLine": 196,
		"startColumn": 72,
		"endColumn": 26,
		"codeElementType": "BLOCK",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 191,
		"endLine": 194,
		"startColumn": 125,
		"endColumn": 26,
		"codeElementType": "BLOCK",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 190,
		"endLine": 197,
		"startColumn": 112,
		"endColumn": 22,
		"codeElementType": "BLOCK",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 206,
		"endLine": 210,
		"startColumn": 64,
		"endColumn": 26,
		"codeElementType": "BLOCK",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 199,
		"endLine": 202,
		"startColumn": 102,
		"endColumn": 22,
		"codeElementType": "BLOCK",
		"description": "extracted code from source method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 186,
		"endLine": 212,
		"startColumn": 55,
		"endColumn": 18,
		"codeElementType": "BLOCK",
		"description": "extracted code from source method declaration",
		"codeElement": null
}],
	"rightSideLocations": [{
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 259,
		"endLine": 288,
		"startColumn": 5,
		"endColumn": 6,
		"codeElementType": "METHOD_DECLARATION",
		"description": "extracted method declaration",
		"codeElement": "private replaceDeclarations(resolver DeclarationScopeResolver, pattern Pattern, constraint Constraint) : void"
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 260,
		"endLine": 260,
		"startColumn": 9,
		"endColumn": 67,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 267,
		"endLine": 267,
		"startColumn": 21,
		"endColumn": 164,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 268,
		"endLine": 268,
		"startColumn": 21,
		"endColumn": 63,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 270,
		"endLine": 270,
		"startColumn": 21,
		"endColumn": 72,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 262,
		"endLine": 263,
		"startColumn": 13,
		"endColumn": 85,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 275,
		"endLine": 276,
		"startColumn": 17,
		"endColumn": 59,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 284,
		"endLine": 284,
		"startColumn": 21,
		"endColumn": 70,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 269,
		"endLine": 271,
		"startColumn": 24,
		"endColumn": 18,
		"codeElementType": "IF_STATEMENT",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 266,
		"endLine": 271,
		"startColumn": 17,
		"endColumn": 18,
		"codeElementType": "IF_STATEMENT",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 265,
		"endLine": 272,
		"startColumn": 13,
		"endColumn": 14,
		"codeElementType": "IF_STATEMENT",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 281,
		"endLine": 285,
		"startColumn": 17,
		"endColumn": 18,
		"codeElementType": "IF_STATEMENT",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 277,
		"endLine": 286,
		"startColumn": 20,
		"endColumn": 14,
		"codeElementType": "IF_STATEMENT",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 274,
		"endLine": 286,
		"startColumn": 13,
		"endColumn": 14,
		"codeElementType": "IF_STATEMENT",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 261,
		"endLine": 287,
		"startColumn": 9,
		"endColumn": 10,
		"codeElementType": "ENHANCED_FOR_STATEMENT",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 269,
		"endLine": 271,
		"startColumn": 64,
		"endColumn": 18,
		"codeElementType": "BLOCK",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 266,
		"endLine": 269,
		"startColumn": 121,
		"endColumn": 18,
		"codeElementType": "BLOCK",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 265,
		"endLine": 272,
		"startColumn": 108,
		"endColumn": 14,
		"codeElementType": "BLOCK",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 281,
		"endLine": 285,
		"startColumn": 58,
		"endColumn": 18,
		"codeElementType": "BLOCK",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 274,
		"endLine": 277,
		"startColumn": 94,
		"endColumn": 14,
		"codeElementType": "BLOCK",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 261,
		"endLine": 287,
		"startColumn": 42,
		"endColumn": 10,
		"codeElementType": "BLOCK",
		"description": "extracted code to extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 160,
		"endLine": 257,
		"startColumn": 5,
		"endColumn": 6,
		"codeElementType": "METHOD_DECLARATION",
		"description": "source method declaration after extraction",
		"codeElement": "private processElement(resolver DeclarationScopeResolver, contextStack Stack<RuleConditionElement>, element RuleConditionElement) : void"
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 177,
		"endLine": 177,
		"startColumn": 17,
		"endColumn": 69,
		"codeElementType": "METHOD_INVOCATION",
		"description": "extracted method invocation",
		"codeElement": "replaceDeclarations(resolver,pattern,constraint)"
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 280,
		"endLine": 280,
		"startColumn": 17,
		"endColumn": 81,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "added statement in extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 279,
		"endLine": 279,
		"startColumn": 17,
		"endColumn": 50,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "added statement in extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 282,
		"endLine": 283,
		"startColumn": 21,
		"endColumn": 59,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "added statement in extracted method declaration",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 277,
		"endLine": 286,
		"startColumn": 44,
		"endColumn": 14,
		"codeElementType": "BLOCK",
		"description": "added statement in extracted method declaration",
		"codeElement": null
}]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable accumulate : Accumulate in method private processElement(resolver DeclarationScopeResolver, contextStack Stack<RuleConditionElement>, element RuleConditionElement) : void from class org.drools.core.rule.LogicTransformer",
	"leftSideLocations": [{
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 222,
		"endLine": 222,
		"startColumn": 13,
		"endColumn": 64,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement with the initializer of the extracted variable",
		"codeElement": null
}],
	"rightSideLocations": [{
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 187,
		"endLine": 187,
		"startColumn": 24,
		"endColumn": 56,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "extracted variable declaration",
		"codeElement": "accumulate : Accumulate"
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 189,
		"endLine": 189,
		"startColumn": 13,
		"endColumn": 53,
		"codeElementType": "EXPRESSION_STATEMENT",
		"description": "statement with the name of the extracted variable",
		"codeElement": null
}]
},
{
	"type": "Inline Variable",
	"description": "Inline Variable children : Object[] in method private processTree(ce GroupElement, result boolean[]) : void from class org.drools.core.rule.LogicTransformer",
	"leftSideLocations": [{
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 354,
		"endLine": 354,
		"startColumn": 18,
		"endColumn": 66,
		"codeElementType": "VARIABLE_DECLARATION_STATEMENT",
		"description": "inlined variable declaration",
		"codeElement": "children : Object[]"
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 355,
		"endLine": 370,
		"startColumn": 9,
		"endColumn": 10,
		"codeElementType": "ENHANCED_FOR_STATEMENT",
		"description": "statement with the name of the inlined variable",
		"codeElement": null
}],
	"rightSideLocations": [{
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 370,
		"endLine": 385,
		"startColumn": 9,
		"endColumn": 10,
		"codeElementType": "ENHANCED_FOR_STATEMENT",
		"description": "statement with the initializer of the inlined variable",
		"codeElement": null
}]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable next : Constraint to constraint : Constraint in method private processElement(resolver DeclarationScopeResolver, contextStack Stack<RuleConditionElement>, element RuleConditionElement) : void from class org.drools.core.rule.LogicTransformer",
	"leftSideLocations": [{
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 180,
		"endLine": 180,
		"startColumn": 18,
		"endColumn": 33,
		"codeElementType": "SINGLE_VARIABLE_DECLARATION",
		"description": "original variable declaration",
		"codeElement": "next : Constraint"
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 181,
		"endLine": 183,
		"startColumn": 17,
		"endColumn": 18,
		"codeElementType": "IF_STATEMENT",
		"description": "statement referencing the original variable",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 180,
		"endLine": 213,
		"startColumn": 13,
		"endColumn": 14,
		"codeElementType": "ENHANCED_FOR_STATEMENT",
		"description": "statement referencing the original variable",
		"codeElement": null
}],
	"rightSideLocations": [{
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 173,
		"endLine": 173,
		"startColumn": 18,
		"endColumn": 39,
		"codeElementType": "SINGLE_VARIABLE_DECLARATION",
		"description": "renamed variable declaration",
		"codeElement": "constraint : Constraint"
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 174,
		"endLine": 176,
		"startColumn": 17,
		"endColumn": 18,
		"codeElementType": "IF_STATEMENT",
		"description": "statement referencing the renamed variable",
		"codeElement": null
}, {
		"filePath": "drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java",
		"startLine": 173,
		"endLine": 178,
		"startColumn": 13,
		"endColumn": 14,
		"codeElementType": "ENHANCED_FOR_STATEMENT",
		"description": "statement referencing the renamed variable",
		"codeElement": null
}]
}
]
}]
}